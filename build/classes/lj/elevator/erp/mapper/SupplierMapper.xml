<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lj.elevator.erp.mapper.SupplierMapper" >
  <resultMap id="BaseResultMap" type="lj.elevator.erp.pojo.Supplier" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="CONTACT" property="contact" jdbcType="VARCHAR" />
    <result column="TELE" property="tele" jdbcType="VARCHAR" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
    <result column="ADDRESS" property="address" jdbcType="VARCHAR" />
    <result column="NOTE" property="note" jdbcType="VARCHAR" />
    <result column="STATE" property="state" jdbcType="CHAR" />
  </resultMap>
  
  
  
  <select id="select" resultMap="BaseResultMap">
  
  SELECT
  `ID`,
  `NAME`,
  `CONTACT`,
  `TELE`,
  `EMAIL`,
  `ADDRESS`,
  `NOTE`,
  `STATE`
FROM `supplier`
where `STATE` = 0

  
  
  
  
  </select>
  
  
  
  
  
   <select id="countByUtil" parameterType="list" resultType="int">
SELECT
COUNT(*) NUM
FROM `supplier`
	<where>
	<foreach collection="list" item="target" >
		`NAME` LIKE  '%${target}%' 
    </foreach>	
    and `STATE` = 0
	</where>
  </select>
  
  
  
  <select id="selectByUtil"  parameterType="lj.elevator.erp.utils.ConditionUtil"  resultMap="BaseResultMap">
SELECT
  `ID`,
  `NAME`,
  `CONTACT`,
  `TELE`,
  `EMAIL`,
  `ADDRESS`,
  `NOTE`,
  `STATE`
FROM `supplier`
<where>
	<if test="conditionS.size() != 0" >
		`NAME` LIKE '%${conditionS[0]}%' 
	</if>	
	and `STATE` = 0
</where>
ORDER BY `id`
LIMIT #{start},#{size}


  </select>  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, NAME, CONTACT, TELE, EMAIL, ADDRESS, NOTE, STATE
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="lj.elevator.erp.pojo.SupplierExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from supplier
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from supplier
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from supplier
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="lj.elevator.erp.pojo.SupplierExample" >
    delete from supplier
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="lj.elevator.erp.pojo.Supplier" >
    insert into supplier (ID, NAME, CONTACT, 
      TELE, EMAIL, ADDRESS, 
      NOTE, STATE)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{contact,jdbcType=VARCHAR}, 
      #{tele,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{note,jdbcType=VARCHAR}, #{state,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="lj.elevator.erp.pojo.Supplier"  useGeneratedKeys="true" keyProperty="id">
    insert into supplier
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="name != null" >
        NAME,
      </if>
      <if test="contact != null" >
        CONTACT,
      </if>
      <if test="tele != null" >
        TELE,
      </if>
      <if test="email != null" >
        EMAIL,
      </if>
      <if test="address != null" >
        ADDRESS,
      </if>
      <if test="note != null" >
        NOTE,
      </if>
      <if test="state != null" >
        STATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="contact != null" >
        #{contact,jdbcType=VARCHAR},
      </if>
      <if test="tele != null" >
        #{tele,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="lj.elevator.erp.pojo.SupplierExample" resultType="java.lang.Integer" >
    select count(*) from supplier
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update supplier
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.contact != null" >
        CONTACT = #{record.contact,jdbcType=VARCHAR},
      </if>
      <if test="record.tele != null" >
        TELE = #{record.tele,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null" >
        EMAIL = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null" >
        ADDRESS = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.note != null" >
        NOTE = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null" >
        STATE = #{record.state,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update supplier
    set ID = #{record.id,jdbcType=INTEGER},
      NAME = #{record.name,jdbcType=VARCHAR},
      CONTACT = #{record.contact,jdbcType=VARCHAR},
      TELE = #{record.tele,jdbcType=VARCHAR},
      EMAIL = #{record.email,jdbcType=VARCHAR},
      ADDRESS = #{record.address,jdbcType=VARCHAR},
      NOTE = #{record.note,jdbcType=VARCHAR},
      STATE = #{record.state,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="lj.elevator.erp.pojo.Supplier" >
    update supplier
    <set >
      <if test="name != null" >
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="contact != null" >
        CONTACT = #{contact,jdbcType=VARCHAR},
      </if>
      <if test="tele != null" >
        TELE = #{tele,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        ADDRESS = #{address,jdbcType=VARCHAR},
      </if>
      <if test="note != null" >
        NOTE = #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        STATE = #{state,jdbcType=CHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="lj.elevator.erp.pojo.Supplier" >
    update supplier
    set NAME = #{name,jdbcType=VARCHAR},
      CONTACT = #{contact,jdbcType=VARCHAR},
      TELE = #{tele,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      ADDRESS = #{address,jdbcType=VARCHAR},
      NOTE = #{note,jdbcType=VARCHAR},
      STATE = #{state,jdbcType=CHAR}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>